<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cherry的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-11T06:42:17.995Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cherry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES5 与 ES6</title>
    <link href="http://yoursite.com/2018/10/07/ES5-%E4%B8%8E-ES6/"/>
    <id>http://yoursite.com/2018/10/07/ES5-与-ES6/</id>
    <published>2018-10-07T08:57:25.000Z</published>
    <updated>2018-10-11T06:42:17.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于变量"><a href="#关于变量" class="headerlink" title="关于变量"></a>关于变量</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><blockquote><p>全部作用域变量和函数作用域变量</p><p>“变量提升”  程序进入某一个函数时，会先将函数内的变量声明放在函数开头，不会提升变量的赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出：undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><blockquote><p>变量声明let和const</p></blockquote><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><blockquote><p>没有“变量提升”，必须先声明后使用</p><p>let 声明的变量不能重复</p><p>const 定义的是只读变量，需在声明时即赋值，变量名不能重复</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="块级作用域的应用场景"><a href="#块级作用域的应用场景" class="headerlink" title="块级作用域的应用场景"></a>块级作用域的应用场景</h4><blockquote><p>内层变量可能会覆盖外层变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(tmp);</span><br><span class="line">&gt;   <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">&gt;     <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; f(); <span class="comment">// undefined</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>用来计数的循环变量泄露为全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">&gt;   <span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>不必要立即执行函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// IIFE 写法</span></span><br><span class="line">&gt; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">var</span> tmp = ...;</span><br><span class="line">&gt;   ...</span><br><span class="line">&gt; &#125;());</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 块级作用域写法</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   <span class="keyword">let</span> tmp = ...;</span><br><span class="line">&gt;   ...</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>应尽量避免在块级作用域中声明函数</p></blockquote><h4 id="声明变量的方式"><a href="#声明变量的方式" class="headerlink" title="声明变量的方式"></a>声明变量的方式</h4><blockquote><p>var function let const import class</p></blockquote><h4 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h4><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><blockquote><p>ES5</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> a = 1;</span><br><span class="line">$ <span class="built_in">let</span> b = 2;</span><br><span class="line">$ <span class="built_in">let</span> c = 3;</span><br></pre></td></tr></table></figure><blockquote><p>ES6</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> [a, b, c] = [1, 2, 3];</span><br></pre></td></tr></table></figure><blockquote><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ 嵌套数组结构</span><br><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure><blockquote><p>不完全结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br></pre></td></tr></table></figure><p>length 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>###关于数组</p><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><blockquote><p>… 数组的展开运算</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(...arr)<span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><blockquote><p>函数批量传参</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun5(...[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>])</span><br></pre></td></tr></table></figure><blockquote><p>替代函数apply方法</p></blockquote><p>应用<code>Math.max</code>方法，简化求出一个数组最大元素的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><p><code>push</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的 写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><h5 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h5><blockquote><p>数组是复合数据类型，直接复制的话只是复制了指向底层数据结构的指针，而不是克隆一个新的数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [2, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES5 变通方法克隆数组</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES6 扩展运算符简单写法</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure><h5 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure><p>注意</p><p>这两种方法合成的新数组都是对原数组成员的引用，属于<code>浅拷贝</code>，如果原数组成员改变，则会反映到新合成的数组上。</p><h5 id="与结构赋值结合"><a href="#与结构赋值结合" class="headerlink" title="与结构赋值结合"></a>与结构赋值结合</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>注意</p><p>采用此方法，数组扩展运算符只能放在参数的最后一位，否则，报错。</p><h5 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h5><p>扩展运算符可以将字符串转为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span><br></pre></td></tr></table></figure><h5 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form()"></a>Array.form()</h5><p><code>Array.from</code>用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的<code>arguments</code>对象。<code>Array.from</code>都可以将它们转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(ps).filter(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p.textContent.length &gt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><blockquote><p>字符串 for…of 遍历</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "f"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br></pre></td></tr></table></figure><h4 id="ES5-1"><a href="#ES5-1" class="headerlink" title="ES5"></a>ES5</h4><blockquote><p>indexOf 用来确定一个字符串是否包含在另一个字符串中</p></blockquote><h4 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h4><blockquote><p>Includes() 返回布尔值 是否找到参数字符串</p><p>startsWith() 返回布尔值 表示参数是否在原字符串头部</p><p>endsWith() 返回布尔值 表示参数是否在原字符串尾部</p></blockquote><p>备注</p><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><p>使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束</p><h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h5><blockquote><p>返回一个新字符串，表示将原字符串重复<code>n</code>次</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><blockquote><p>参数如果是小数，会被取整</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="number">2.9</span>) <span class="comment">// "nana"</span></span><br></pre></td></tr></table></figure><p>备注</p><ul><li>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错</li><li>如果参数是 0 到-1 之间的小数，则等同于 0</li><li>参数<code>NaN</code>等同于 0</li></ul><h5 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h5><blockquote><p>字符串补全长度的功能，如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><blockquote><p>ES5</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(</span><br><span class="line">  <span class="string">'There are &lt;b&gt;'</span> + basket.count + <span class="string">'&lt;/b&gt; '</span> +</span><br><span class="line">  <span class="string">'items in your basket, '</span> +</span><br><span class="line">  <span class="string">'&lt;em&gt;'</span> + basket.onSale +</span><br><span class="line">  <span class="string">'&lt;/em&gt; are on sale!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>ES6</p><p>模板字符串是增强版的字符串，反引号（`）标识。可以当做普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><blockquote><p>模板字符串中嵌入变量，需要将变量名写在<code>${}</code>之中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params">user, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!user.hasPrivilege(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="comment">// 传统写法为</span></span><br><span class="line">      <span class="comment">// 'User '</span></span><br><span class="line">      <span class="comment">// + user.name</span></span><br><span class="line">      <span class="comment">// + ' is not authorized to do '</span></span><br><span class="line">      <span class="comment">// + action</span></span><br><span class="line">      <span class="comment">// + '.'</span></span><br><span class="line">      <span class="string">`User <span class="subst">$&#123;user.name&#125;</span> is not authorized to do <span class="subst">$&#123;action&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 2 = 3"</span></span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 4 = 5"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "3"</span></span><br></pre></td></tr></table></figure><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><h4 id="属性简洁表示"><a href="#属性简洁表示" class="headerlink" title="属性简洁表示"></a>属性简洁表示</h4><p>ES6 允许直接写入变量和函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;</span><br><span class="line">baz <span class="comment">// &#123;foo: "bar"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</span><br></pre></td></tr></table></figure><p>方法简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h4><p>除了用标识符作为属性名，ES6 增加了使用表达式作为对象的属性名，需要放在<code>[]</code>中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">obj.foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">obj[<span class="string">'a'</span> + <span class="string">'bc'</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lastWord = <span class="string">'last word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</span><br><span class="line">  [lastWord]: <span class="string">'world'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></span><br><span class="line">a[lastWord] <span class="comment">// "world"</span></span><br><span class="line">a[<span class="string">'last word'</span>] <span class="comment">// "world"</span></span><br></pre></td></tr></table></figure><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>ES5 比较两个值是否相等：<code>==</code>（相等运算符）和 <code>===</code>（严格相等运算符）。</p><p>ES6 <code>Object.is()</code> 与<code>===</code> 行为基本一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>两个不同之处</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p>注意</p><ul><li>浅拷贝（如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用）</li><li>同名属性替换不是添加</li><li>处理数组是会把数组视为对象</li><li>如果复制的是一个函数，则函数取值后再进行复制</li></ul><p>####Object.assign() 应用</p><h5 id="为对象添加属性"><a href="#为对象添加属性" class="headerlink" title="为对象添加属性"></a>为对象添加属性</h5><p>将<code>x</code>属性和<code>y</code>属性添加到<code>Point</code>类的对象实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="为对象添加方法"><a href="#为对象添加方法" class="headerlink" title="为对象添加方法"></a>为对象添加方法</h5><p>使用<code>assign</code>方法添加到<code>SomeClass.prototype</code>之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  someMethod(arg1, arg2) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  anotherMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="合并多个对象"><a href="#合并多个对象" class="headerlink" title="合并多个对象"></a>合并多个对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure><h4 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h4><p><strong>（1） for…in</strong></p><p>循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）</p><p><strong>（2）Object.keys(obj)</strong></p><p>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><p>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><p>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><p>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p><h4 id="扩展运算符-1"><a href="#扩展运算符-1" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>对象的扩展运算符（<code>...</code>）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span><br><span class="line">n <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aClone = &#123; ...a &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aClone = <span class="built_in">Object</span>.assign(&#123;&#125;, a);</span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure><p>f</p><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><h4 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h4><blockquote><p>分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示二进制和八进制</p></blockquote><h4 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite(), Number.isNaN()"></a>Number.isFinite(), Number.isNaN()</h4><blockquote><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（finite），即不是<code>Infinity</code>。</p><p><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p><p>这两个新方法只对数值有效，<code>Number.isFinite()</code>对于非数值一律返回<code>false</code>, <code>Number.isNaN()</code>只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</p></blockquote><h4 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt(), Number.parseFloat()"></a>Number.parseInt(), Number.parseFloat()</h4><blockquote><p>和全局方法相比行为完全不变，是为了减少全局方法的使用，使语言逐步模块化。</p></blockquote><h4 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h4><blockquote><p>用来判断一个数值是否为整数，如果不是数值返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Math-对象扩展"><a href="#Math-对象扩展" class="headerlink" title="Math 对象扩展"></a>Math 对象扩展</h4><h5 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h5><blockquote><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</p></blockquote><p>注意</p><ul><li>对于非数值，<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值</li><li>对于空值和无法截取整数的值，返回<code>NaN</code></li></ul><h5 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h5><blockquote><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p><ul><li>参数为正数，返回<code>+1</code></li><li>参数为负数，返回<code>-1</code></li><li>参数为 0，返回<code>0</code></li><li>参数为-0，返回<code>-0</code></li><li>其他值，返回<code>NaN</code></li></ul></blockquote><h3 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h3><h4 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h4><h5 id="ES6-2"><a href="#ES6-2" class="headerlink" title="ES6"></a>ES6</h5><blockquote><p>给形参函数设置默认值，构造函数同理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b)<span class="comment">//1,2</span></span><br><span class="line">&#125;</span><br><span class="line">fun2(<span class="number">11</span>,<span class="number">22</span>);<span class="comment">//11 22</span></span><br><span class="line">fun2(<span class="number">100</span>);<span class="comment">//100 2</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常函数</span></span><br><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> fun3 = <span class="function">(<span class="params">a</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(a);&#125;</span><br><span class="line">fun3(<span class="number">999</span>);</span><br></pre></td></tr></table></figure><h5 id="this知识"><a href="#this知识" class="headerlink" title="this知识"></a>this知识</h5><blockquote><p>函数体外this指window对象</p><p>函数体内，谁调用函数this就指向谁</p><p>构造函数，this指的是新创建的对象</p><p>html标签中，this指的是这个标签元素</p><p>ES6 对于箭头函数，this指向需要根据在哪里创建和当前作用域确定。</p><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li></ul></blockquote><h5 id="不适用场合"><a href="#不适用场合" class="headerlink" title="不适用场合"></a>不适用场合</h5><ul><li>定义函数的方法，且该方法内部包括<code>this</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  lives: <span class="number">9</span>,</span><br><span class="line">  jumps: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.lives--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>cat.jumps()</code>方法是一个箭头函数，这是错误的。调用<code>cat.jumps()</code>时，如果是普通函数，该方法内部的<code>this</code>指向<code>cat</code>；如果写成上面那样的箭头函数，使得<code>this</code>指向全局对象，因此不会得到预期结果。</p></blockquote><ul><li>需要动态<code>this</code>的时候，也不应使用箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'press'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">this</span>.classList.toggle(<span class="string">'on'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行时，点击按钮会报错，因为<code>button</code>的监听函数是一个箭头函数，导致里面的<code>this</code>就是全局对象。如果改成普通函数，<code>this</code>就会动态指向被点击的按钮对象。</p></blockquote><h4 id="双冒号运算符"><a href="#双冒号运算符" class="headerlink" title="双冒号运算符"></a>双冒号运算符</h4><blockquote><p>函数绑定运算符(<code>::</code>)，用来取代<code>call</code>、<code>apply</code>、<code>bind</code>调用。冒号左边是对象，右边是一个函数。双冒号运算符会自动将左边对象作为上下文环境（this对象）绑定到右边函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foo::bar;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.bind(foo);</span><br><span class="line"></span><br><span class="line">foo::bar(...arguments);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.apply(foo, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj::hasOwnProperty(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> method = obj::obj.foo;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> method = ::obj.foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> log = ::<span class="built_in">console</span>.log;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。</p></blockquote><h4 id="尾部调用"><a href="#尾部调用" class="headerlink" title="尾部调用"></a>尾部调用</h4><blockquote><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><blockquote><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码是一个阶乘函数，计算<code>n</code>的阶乘，最多需要保存<code>n</code>个调用记录，复杂度 O(n) </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尾递归</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><blockquote><p>如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。</p></blockquote><h3 id="apply-和-call"><a href="#apply-和-call" class="headerlink" title="apply 和 call"></a>apply 和 call</h3><blockquote><p>对象本身没有某个属性或者方法，进而使用apply或者call去引用其他对象的属性方法，改变this的指向。</p></blockquote><p>使用方法</p><p>apply(this指向,数组/arguments)</p><p>call(this指向,参数1,参数2,参数3)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">"window的name"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"obj的name"</span>,</span><br><span class="line">    showName:<span class="function"><span class="keyword">function</span>(<span class="params">v1,v2,v3</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(v1,v2,v3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.showName();</span><br><span class="line">obj.showName.apply(<span class="built_in">window</span>,[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]);<span class="comment">//10 20 30</span></span><br><span class="line"><span class="comment">//apply括号里的是谁，调用的前面的函数里面的this就是谁</span></span><br><span class="line">obj.showName.call(<span class="built_in">window</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)<span class="comment">//10  20  30</span></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/b8d4f1d81b57" target="_blank" rel="noopener">ES6新增</a></p><p><a href="https://www.jianshu.com/p/b3f3afcae230" target="_blank" rel="noopener">ES6新特性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于变量&quot;&gt;&lt;a href=&quot;#关于变量&quot; class=&quot;headerlink&quot; title=&quot;关于变量&quot;&gt;&lt;/a&gt;关于变量&lt;/h3&gt;&lt;h4 id=&quot;ES5&quot;&gt;&lt;a href=&quot;#ES5&quot; class=&quot;headerlink&quot; title=&quot;ES5&quot;&gt;&lt;/a&gt;ES
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES5那些事</title>
    <link href="http://yoursite.com/2018/09/29/ES5%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2018/09/29/ES5那些事/</id>
    <published>2018-09-29T02:34:22.000Z</published>
    <updated>2018-10-10T06:01:50.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>基本语法包括数据类型，操作符，语句，函数</p><p>数据类型：Number，String，Boolean，Null，Undefined，Array，Object</p><p>操作符：算数操作符，布尔操作符，赋值操作符</p><p>语句：if语句，for语句，case语句等</p></blockquote><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h4><blockquote><p>有且只有一个值称为undefined。任何没有被赋值的变量都有undefined值。</p></blockquote><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><blockquote><p>有且只有一个值null</p></blockquote><h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><blockquote><p>表示逻辑实体 true或false</p></blockquote><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><blockquote><p>字符串类型是所有有限的零个或多个 16 位无符号整数值（“元素”）的有序序列</p></blockquote><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><blockquote><p>数值类型拥有 18437736874454810627（即，264-253 +3）个值，非数字值 NaN</p><p>特殊值：正无穷和负无穷 +Infinity -Infinity </p></blockquote><h4 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h4><blockquote><p>属性的集合。</p></blockquote><h4 id="引用规范类型"><a href="#引用规范类型" class="headerlink" title="引用规范类型"></a>引用规范类型</h4><blockquote><p>用来说明 delete，typeof，赋值运算符这些运算符的行为</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h4><blockquote><p>接受一个值和一个可选类型作为参数，可以把值转换为非对象类型</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Null</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Boolean</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Number</td><td>结果等于输入的参数（不转换</td></tr><tr><td>String</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Object</td><td>返回该对象的默认值。（调用该对象的内部方法[[DefaultValue]]一样）</td></tr></tbody></table><h4 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h4><blockquote><p> 将其参数转换为布尔值类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Number</td><td>如果参数是 +0, -0, 或 NaN, 结果为 false , 否则结果为 true</td></tr><tr><td>String</td><td>如果参数参数是空字符串（其长度为零），结果为 false，否则结果为 true</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><h4 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h4><blockquote><p>将参数转换为数值类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>+0</td></tr><tr><td>Boolean</td><td>如果参数是 true，结果为 1; 如果参数是 false，此结果为 +0</td></tr><tr><td>Number</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>String</td><td></td></tr><tr><td>Object</td><td>设 原始值 为 <code>ToPrimitive</code>( 输入参数 , 暗示 数值类型)。 返回 <code>ToNumber</code>( 原始值 )</td></tr></tbody></table><h4 id="ToInteger"><a href="#ToInteger" class="headerlink" title="ToInteger"></a>ToInteger</h4><blockquote><p>将参数转化为整数值</p></blockquote><ol><li>对输入参数调用 <code>ToNumber</code></li><li>如果 Result(1) 是 NaN，返回 +0</li><li>如果 Result(1) 是 +0 ，-0，+∞，或 -∞，返回 Result(1)</li><li>计算 sign(Result(1)) * floor(abs(Result(1)))</li><li>返回 Result(4)</li></ol><h4 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h4><blockquote><p>将其参数转换为字符串类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“null”</td></tr><tr><td>Boolean</td><td>如果参数是 true，那么结果为 “true”。如果参数是 false，那么结果为 “false”</td></tr><tr><td>Number</td><td></td></tr><tr><td>String</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Object</td><td>1. 调用 <code>ToPrimitive</code>( 输入参数 , 暗示 字符串类型)。 2. 调用 ToString(Result(1))。 3. 返回 Result(2)。</td></tr></tbody></table><h4 id="ToObject"><a href="#ToObject" class="headerlink" title="ToObject"></a>ToObject</h4><blockquote><p>将其参数转换为对象类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>抛出 TypeError 异常</td></tr><tr><td>Null</td><td>抛出 TypeError 异常</td></tr><tr><td>Boolean</td><td>创建一个新的Boolean对象，其 [[PrimitiveValue]]属性被设为该布尔值的值</td></tr><tr><td>Number</td><td>创建一个新的Number对象，其[[PrimitiveValue]]属性被设为该布尔值的值</td></tr><tr><td>String</td><td>创建一个新的String对象，其 [[PrimitiveValue]] 属性被设为该布尔值的值</td></tr><tr><td>Object</td><td>结果是输入的参数（不转换）</td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="主值表达式"><a href="#主值表达式" class="headerlink" title="主值表达式"></a>主值表达式</h4><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><blockquote><p>this 关键字执行为当前执行环境的 ThisBinding</p></blockquote><h5 id="标识符引用"><a href="#标识符引用" class="headerlink" title="标识符引用"></a>标识符引用</h5><h5 id="字面量引用"><a href="#字面量引用" class="headerlink" title="字面量引用"></a>字面量引用</h5><h5 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h5><h5 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h5><h5 id="分组表达式"><a href="#分组表达式" class="headerlink" title="分组表达式"></a>分组表达式</h5><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><h5 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h5><h5 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h5><table><thead><tr><th>val 类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>“Undefined”</td></tr><tr><td>Null</td><td>“null”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Number</td><td>“number”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Object（原生，且没有实现call）</td><td>“object”</td></tr><tr><td>Object（原生或者宿主实现call）</td><td>“function”</td></tr></tbody></table><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ( Expression ) Statement else Statement</span><br></pre></td></tr></table></figure><h4 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h4><h5 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h5><blockquote><p>循环至少执行一次，即便条件为 false，因为代码块是在条件语句判断前执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> Statement <span class="keyword">while</span> ( Expression )</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    text += <span class="string">"&lt;br&gt;数字为 "</span> + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123; </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h5><blockquote><p>while 循环会在指定条件为真时循环执行代码块。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( Expression ) Statement</span><br></pre></td></tr></table></figure><h5 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ExpressionNoInopt ; Expressionopt ; Expressionopt) Statement</span><br></pre></td></tr></table></figure><h5 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( LeftHandSideExpression <span class="keyword">in</span> Expression ) Statement</span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">fname</span>:<span class="string">"John"</span>, <span class="attr">lname</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person) &#123;</span><br><span class="line">text += person[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：John Doe <span class="number">25</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：for/in 语句用于循环对象属性。循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</p><ul><li><strong>for</strong> - 循环代码块一定的次数</li><li><strong>for/in</strong> - 循环遍历对象的属性</li><li><strong>while</strong> - 当指定的条件为 true 时循环指定的代码块</li><li><strong>do/while</strong> - 同样当指定的条件为 true 时循环指定的代码块</li></ul><p>注意：不要使用 for/in 语句来循环数组的索引，你可以使用 <a href="http://www.runoob.com/jsref/jsref-for.html" target="_blank" rel="noopener">for</a> 语句替代。</p></blockquote><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h4><blockquote><p><strong>continue 语句</strong>中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 该例子跳过了值 3</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">    x=x + <span class="string">"The number is "</span> + i + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h4><blockquote><p>break 语句可用于跳出循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">    x=x + <span class="string">"The number is "</span> + i + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：break 语句可用于跳出循环。</p><p>continue 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）</p></blockquote><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><blockquote><p>return 语句会终止函数的执行并返回函数的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with ( Expression ) Statement</span><br></pre></td></tr></table></figure><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><blockquote><p>switch 语句用于基于不同的条件来执行不同的动作。</p><p>switch 语句是 JavaScript 条件语句的一部分，用于根据不同的条件执行不同的动作。 使用 switch 从多个语句块中选择一个执行。</p><p>switch 语句计算每个表达式。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。</p><p>switch 语句通常与 break 或 default 关键字一起使用。两者都是可选的</p><p><strong>break</strong> 关键字用于跳出switch代码块。会终止switch代码块的执行。 如果忽略该关键字，swith 语句的下一个代码块会被执行。</p><p><strong>default</strong> 关键字 来规定匹配不存在时做的事情。 default 关键字在 switch 语句中只能出现一次。虽然是可选参数，但是建议都使用该参数，在不是我们期望的情况下，可以使用它输出信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        默认代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h4><blockquote><p> throw [no LineTerminator here] Expression ;</p><p>检测输入变量的值。如果值是错误的，会抛出一个异常（err）</p><p>异常 (err) 通过 catch 语句捕获并自定义输出错误信息</p><ul><li>throw 语句抛出一个错误</li><li>当错误发生时， JavaScript 会停止执行并抛出错误信息</li><li>异常可以是 JavaScript 字符串、数字、逻辑值或对象</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">       <span class="keyword">if</span>(x == <span class="string">""</span>) <span class="keyword">throw</span> <span class="string">"is Empty"</span>;</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">isNaN</span>(x)) <span class="keyword">throw</span> <span class="string">"not a number"</span>;</span><br><span class="line">       <span class="keyword">if</span>(x &gt; <span class="number">10</span>) <span class="keyword">throw</span> <span class="string">"too high"</span>;</span><br><span class="line">       <span class="keyword">if</span>(x &lt; <span class="number">5</span>) <span class="keyword">throw</span> <span class="string">"too low"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">       message.innerHTML = <span class="string">"Input "</span> + err;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><blockquote><p>debugger 语句用于停止执行 JavaScript，并调用 (如果可用) 调试函数</p><p>使用 debugger 语句类似于在代码中设置断点</p><p>通常，你可以通过按下 F12 开启调试工具， 并在调试菜单中选择 “Console”</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h4><blockquote><p>唯一的全局对象建立在控制进入任何执行环境之前</p></blockquote><h5 id="全局对象值属性"><a href="#全局对象值属性" class="headerlink" title="全局对象值属性"></a>全局对象值属性</h5><h6 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h6><blockquote><p>NaN 的值是 NaN</p></blockquote><h6 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h6><blockquote><p>Infinity 的值是 +∞</p></blockquote><h6 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h6><blockquote><p>undefined 的值是 undefined</p></blockquote><h5 id="全局对象的函数属性"><a href="#全局对象的函数属性" class="headerlink" title="全局对象的函数属性"></a>全局对象的函数属性</h5><h6 id="eval-x"><a href="#eval-x" class="headerlink" title="eval (x)"></a>eval (x)</h6><blockquote><p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行</p><p>如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。</p></blockquote><h6 id="parseInt-string-radix"><a href="#parseInt-string-radix" class="headerlink" title="parseInt (string , radix)"></a>parseInt (string , radix)</h6><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要被解析的字符串。</td></tr><tr><td>radix</td><td>可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</td></tr></tbody></table><ul><li>如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。</li><li>如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。</li><li>如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</li></ul><h6 id="parseFloat-string"><a href="#parseFloat-string" class="headerlink" title="parseFloat (string)"></a>parseFloat (string)</h6><blockquote><p>parseFloat() 函数可解析一个字符串，并返回一个浮点数。</p><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p></blockquote><h6 id="isNaN-value"><a href="#isNaN-value" class="headerlink" title="isNaN(value)"></a>isNaN(value)</h6><blockquote><p>isNaN() 函数用于检查其参数是否是非数字值。</p><p>如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。</p></blockquote><h6 id="isFinite-value"><a href="#isFinite-value" class="headerlink" title="isFinite(value)"></a>isFinite(value)</h6><blockquote><p>isFinite() 函数用于检查其参数是否是无穷大。</p><p>如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</p></blockquote><h6 id="Number-object"><a href="#Number-object" class="headerlink" title="Number(object)"></a>Number(object)</h6><blockquote><p>Number() 函数把对象的值转换为数字。</p><p>如果对象的值无法转换为数字，那么 Number() 函数返回 NaN。</p><p>object 可选。一个 JavaScript 对象。如果没有提供参数，则返回0。</p></blockquote><h6 id="String-object"><a href="#String-object" class="headerlink" title="String(object)"></a>String(object)</h6><blockquote><p>String() 函数把对象的值转换为字符串。</p></blockquote><h4 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h4><h4 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h4><h5 id="Math-对象属性"><a href="#Math-对象属性" class="headerlink" title="Math 对象属性"></a>Math 对象属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td>返回算术常量 e，即自然对数的底数（约等于2.718）</td></tr><tr><td>LN2</td><td>返回 2 的自然对数（约等于0.693）</td></tr><tr><td>LN10</td><td>返回 10 的自然对数（约等于2.302）</td></tr><tr><td>LOG2E</td><td>返回以 2 为底的 e 的对数（约等于 1.4426950408889634）</td></tr><tr><td>LOG10E</td><td>返回以 10 为底的 e 的对数（约等于0.434）</td></tr><tr><td>PI</td><td>返回圆周率（约等于3.14159）</td></tr><tr><td>SORT1 2</td><td>返回 2 的平方根的倒数（约等于 0.707）</td></tr><tr><td>SORT2</td><td>返回 2 的平方根（约等于 1.414）</td></tr></tbody></table><h5 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回</td></tr><tr><td>ceil(x)</td><td>对数进行上舍入</td></tr><tr><td>exp(x)</td><td>返回 E^x 的指数</td></tr><tr><td>floor(x)</td><td>对x进行下舍入</td></tr><tr><td>max(x,y,z,…n)</td><td>返回 x,y,z,…,n 中的最高值</td></tr><tr><td>min(x,y,z,…n)</td><td>返回 x,y,z,…,n中的最低值</td></tr><tr><td>pow(x,y)</td><td>返回 x 的 y 次幂</td></tr><tr><td>random()</td><td>返回0-1之间的随机数</td></tr><tr><td>round(x)</td><td>四舍五入</td></tr></tbody></table><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回创建数组对象的原型函数</td></tr><tr><td>length</td><td>设置或返回数组元素的个数</td></tr><tr><td>prototype</td><td>允许向数组对象添加属性或方法</td></tr></tbody></table><h4 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或更多的数组，并返回结果。</td></tr><tr><td>every()</td><td>用于检测数组所有元素是否都符合指定条件（通过函数提供）如果有一个元素不满足，返回false，所有元素都满足，则返回true。</td></tr><tr><td>fill()</td><td>将一个固定值替换数组中所有的元素。</td></tr><tr><td>filter()</td><td>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的元素。</td></tr><tr><td>find()</td><td>返回通过测试（函数内判断）的数组的第一个元素的值</td></tr><tr><td>forEach()</td><td>调用数组的每个元素，并将元素传递给回调函数</td></tr><tr><td>isArray()</td><td>判断一个对象是否为数组, Array.isArray(array)</td></tr><tr><td>map()</td><td>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</td></tr><tr><td>pop()</td><td>删除数组的最后一个元素并返回删除的元素</td></tr><tr><td>reverse()</td><td>反转数组的元素顺序</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>选取数组的的一部分，并返回一个新数组，不会改变原始数组</td></tr><tr><td>splice()</td><td>插入、删除或替换数组的元素，会改变原始数组</td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或更多元素，并返回新的长度，将改变数组的数目</td></tr></tbody></table><h4 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h4><blockquote><p>用于处理日期和时间</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建 Date 对象方法</span><br><span class="line">$ var d = new Date();</span><br><span class="line">$ var d = new Date(milliseconds);</span><br><span class="line">$ var d = new Date(dateString);</span><br><span class="line">$ var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);</span><br></pre></td></tr></table></figure><h5 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getDate()</td><td>从Date对象返回一个月的某一天（1-31）</td></tr><tr><td>getDay()</td><td>从Date对象返回一周中的某一天（0-6）</td></tr><tr><td>getFullYear()</td><td>以四位数返回年份</td></tr><tr><td>getHours()</td><td>返回小时（0-23）</td></tr><tr><td>getMilliseconds()</td><td>返回毫秒（0-999）</td></tr><tr><td>getMinutes()</td><td>返回分钟（0-59）</td></tr><tr><td>getMonth()</td><td>返回月份(0-11)</td></tr><tr><td>getTime()</td><td>返回从1970年1月1日至今的毫秒数</td></tr><tr><td>getSeconds()</td><td>返回秒数（0-59）</td></tr><tr><td>parse()</td><td>返回 1970/1/1 午夜距离指定日期时间的毫秒数</td></tr><tr><td>setDate()</td><td>用于设置一个月的某一天</td></tr><tr><td>valueOf</td><td>返回 Date 对象的原始值原始值返回1970年1月1日午夜以来的毫秒数！</td></tr></tbody></table><h4 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h4><h5 id="Number-对象属性"><a href="#Number-对象属性" class="headerlink" title="Number 对象属性"></a>Number 对象属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回对创建此对象的 Number 函数的引用</td></tr><tr><td>MAX_VALUE</td><td>可表示的最大数</td></tr><tr><td>MIN_VALUE</td><td>可表示的最小数</td></tr><tr><td>NAGATIVE_INFINITY</td><td>负无穷大，溢出时返回该数值</td></tr><tr><td>NaN</td><td>非数字值</td></tr><tr><td>POSITIVE_INFINITITY</td><td>正无穷大，溢出时返回该数值</td></tr><tr><td>prototype</td><td>允许向对象添加属性和方法</td></tr></tbody></table><h5 id="Number-对象方法"><a href="#Number-对象方法" class="headerlink" title="Number 对象方法"></a>Number 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toExponential()</td><td>将对象的值转换为指数计数法</td></tr><tr><td>toFixed()</td><td>四舍五入为指定小数位数的数字</td></tr><tr><td>toPrecision()</td><td>对象的值超出指定位数时转换为指数计数法</td></tr><tr><td>toString()</td><td>转换为字符串</td></tr><tr><td>valueOf()</td><td>返回一个 Number 对象的基本数字值</td></tr></tbody></table><h4 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h4><blockquote><p>正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">var patt=new RegExp(pattern,modifiers);</span><br><span class="line">或者</span><br><span class="line">var patt=/pattern/modifiers;</span><br></pre></td></tr></table></figure><ul><li>pattern（模式） 描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var re = new RegExp(&quot;\\w+&quot;);</span><br><span class="line">等价</span><br><span class="line">var re = /\w+/;</span><br></pre></td></tr></table></figure><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感</td></tr><tr><td>g</td><td>执行全局匹配</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><h5 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h5><blockquote><p>用于查找某个范围内的字符</p></blockquote><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何从0至9的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写a到小写z的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写A到大写Z的字符</td></tr><tr><td>(red\</td><td>blue\</td><td>green)</td><td>查找任何给定的选项</td></tr></tbody></table><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><blockquote><p>拥有特殊含义的字符</p></blockquote><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行符和</td></tr><tr><td>\w</td><td>查找单词字符，单词字符包括：a-z、A-Z、0-9，以及下划线, 包含 _ (下划线) 字符</td></tr><tr><td>\W</td><td>查找非单词字符</td></tr><tr><td>\d</td><td>查找数字</td></tr><tr><td>\D</td><td>查找非数字字符</td></tr><tr><td>\s</td><td>查找空白字符</td></tr><tr><td>\S</td><td>查找非空白字符</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr><tr><td>\0</td><td>查找null字符</td></tr><tr><td>\n</td><td>查找换行符</td></tr><tr><td>\f</td><td>查找换页符</td></tr><tr><td>\r</td><td>查找回车符</td></tr><tr><td>\t</td><td>查找制表符</td></tr></tbody></table><h5 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h5><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个n的字符串</td></tr><tr><td>n*</td><td>匹配任何包含零个或者多个n的字符串</td></tr><tr><td>n?</td><td>匹配任何包含零个或者一个n的字符串</td></tr><tr><td>n{X}</td><td>匹配包含 X 个 n 的序列的字符串</td></tr><tr><td>n{X，}</td><td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配</td></tr><tr><td>n{X，Y}</td><td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配</td></tr><tr><td>n$</td><td>匹配任何以n结尾的字符串</td></tr><tr><td>^n</td><td>匹配任何以n开头的字符串</td></tr><tr><td>?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串</td></tr></tbody></table><h5 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>exec()</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。var result=patt.exec(str);</td></tr><tr><td>test()</td><td>检索字符串中指定的值。返回 true 或 false。var result=patt.test(str);</td></tr><tr><td>toString()</td><td>返回正则表达式的字符串。</td></tr></tbody></table><h5 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search()</td><td>检索与正则表达式相匹配的值。如果没有找到任何匹配的子串，则返回 -1。var n=str.search(“Runoob”);</td></tr><tr><td>match()</td><td>找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。<em>string</em>.match(<em>regexp</em>)</td></tr><tr><td>replace()</td><td>在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。<em>string</em>.replace(<em>searchvalue,newvalue</em>)</td></tr><tr><td>split()</td><td>用于把一个字符串分割成字符串数组。<em>string</em>.split(<em>separator</em>,<em>limit</em>)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES5&quot;&gt;&lt;a href=&quot;#ES5&quot; class=&quot;headerlink&quot; title=&quot;ES5&quot;&gt;&lt;/a&gt;ES5&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 搭建博客</title>
    <link href="http://yoursite.com/2018/09/28/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/09/28/hexo搭建博客/</id>
    <published>2018-09-28T06:06:46.511Z</published>
    <updated>2018-09-28T10:00:49.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.js</span><br><span class="line">Git</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo into blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g || hexo generate</span><br><span class="line">$ hexo s || hexo server</span><br></pre></td></tr></table></figure><p>Hexo 常用命令<br>  hexo g 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>  hexo s 启动本地web服务，用于博客的预览<br>  hexo deploy (hexo d) 部署播客到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">'postName'</span> --- 新建文章</span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> --- 新建页面</span><br></pre></td></tr></table></figure><p>常用简写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure></p><p>目前安装所用的本地环境如下：(可以通过hexo -v查看)</p><h3 id="Hexo-主题设置"><a href="#Hexo-主题设置" class="headerlink" title="Hexo 主题设置"></a>Hexo 主题设置</h3><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next</p><h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动本地web服务器</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h2><h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改Hexo目录下的_config.yml配置文件</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>需要提前安装一个扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在命令行中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="使用git命令行部署"><a href="#使用git命令行部署" class="headerlink" title="使用git命令行部署"></a>使用git命令行部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo/blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/username.github.io.git .deploy/username.github.io</span><br></pre></td></tr></table></figure><p>将github上创建的博客克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码</p><h3 id="创建一个deploy脚本文件"><a href="#创建一个deploy脚本文件" class="headerlink" title="创建一个deploy脚本文件"></a>创建一个deploy脚本文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ cp -R public/ .deploy/username.github.io</span><br><span class="line">$ <span class="built_in">cd</span> .deploy/username.github.io</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m “update”</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h2 id="Hexo-配置主题"><a href="#Hexo-配置主题" class="headerlink" title="Hexo 配置主题"></a>Hexo 配置主题</h2><p>主题配置在themes文件下_config.yml</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">我是如何利用Github Pages搭建起我的博客，细数一路的坑</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统环境配置&quot;&gt;&lt;a href=&quot;#系统环境配置&quot; class=&quot;headerlink&quot; title=&quot;系统环境配置&quot;&gt;&lt;/a&gt;系统环境配置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
  </entry>
  
</feed>
