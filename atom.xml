<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cherry的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-30T07:11:28.987Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cherry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES5那些事</title>
    <link href="http://yoursite.com/2018/09/29/ES5%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2018/09/29/ES5那些事/</id>
    <published>2018-09-29T02:34:22.000Z</published>
    <updated>2018-09-30T07:11:28.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>基本语法包括数据类型，操作符，语句，函数</p><p>数据类型：Number，String，Boolean，Null，Undefined，Array，Object</p><p>操作符：算数操作符，布尔操作符，赋值操作符</p><p>语句：if语句，for语句，case语句等</p></blockquote><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h4><blockquote><p>有且只有一个值称为undefined。任何没有被赋值的变量都有undefined值。</p></blockquote><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><blockquote><p>有且只有一个值null</p></blockquote><h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><blockquote><p>表示逻辑实体 true或false</p></blockquote><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><blockquote><p>字符串类型是所有有限的零个或多个 16 位无符号整数值（“元素”）的有序序列</p></blockquote><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><blockquote><p>数值类型拥有 18437736874454810627（即，264-253 +3）个值，非数字值 NaN</p><p>特殊值：正无穷和负无穷 +Infinity -Infinity </p></blockquote><h4 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h4><blockquote><p>属性的集合。</p></blockquote><h4 id="引用规范类型"><a href="#引用规范类型" class="headerlink" title="引用规范类型"></a>引用规范类型</h4><blockquote><p>用来说明 delete，typeof，赋值运算符这些运算符的行为</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h4><blockquote><p>接受一个值和一个可选类型作为参数，可以把值转换为非对象类型</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Null</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Boolean</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Number</td><td>结果等于输入的参数（不转换</td></tr><tr><td>String</td><td>结果等于输入的参数（不转换</td></tr><tr><td>Object</td><td>返回该对象的默认值。（调用该对象的内部方法[[DefaultValue]]一样）</td></tr></tbody></table><h4 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h4><blockquote><p> 将其参数转换为布尔值类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Number</td><td>如果参数是 +0, -0, 或 NaN, 结果为 false , 否则结果为 true</td></tr><tr><td>String</td><td>如果参数参数是空字符串（其长度为零），结果为 false，否则结果为 true</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><h4 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h4><blockquote><p>将参数转换为数值类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>+0</td></tr><tr><td>Boolean</td><td>如果参数是 true，结果为 1; 如果参数是 false，此结果为 +0</td></tr><tr><td>Number</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>String</td><td></td></tr><tr><td>Object</td><td>设 原始值 为 <code>ToPrimitive</code>( 输入参数 , 暗示 数值类型)。 返回 <code>ToNumber</code>( 原始值 )</td></tr></tbody></table><h4 id="ToInteger"><a href="#ToInteger" class="headerlink" title="ToInteger"></a>ToInteger</h4><blockquote><p>将参数转化为整数值</p></blockquote><ol><li>对输入参数调用 <code>ToNumber</code></li><li>如果 Result(1) 是 NaN，返回 +0</li><li>如果 Result(1) 是 +0 ，-0，+∞，或 -∞，返回 Result(1)</li><li>计算 sign(Result(1)) * floor(abs(Result(1)))</li><li>返回 Result(4)</li></ol><h4 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h4><blockquote><p>将其参数转换为字符串类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“null”</td></tr><tr><td>Boolean</td><td>如果参数是 true，那么结果为 “true”。如果参数是 false，那么结果为 “false”</td></tr><tr><td>Number</td><td></td></tr><tr><td>String</td><td>结果等于输入的参数（不转换）</td></tr><tr><td>Object</td><td>1. 调用 <code>ToPrimitive</code>( 输入参数 , 暗示 字符串类型)。 2. 调用 ToString(Result(1))。 3. 返回 Result(2)。</td></tr></tbody></table><h4 id="ToObject"><a href="#ToObject" class="headerlink" title="ToObject"></a>ToObject</h4><blockquote><p>将其参数转换为对象类型的值</p></blockquote><table><thead><tr><th>输入类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>抛出 TypeError 异常</td></tr><tr><td>Null</td><td>抛出 TypeError 异常</td></tr><tr><td>Boolean</td><td>创建一个新的Boolean对象，其 [[PrimitiveValue]]属性被设为该布尔值的值</td></tr><tr><td>Number</td><td>创建一个新的Number对象，其[[PrimitiveValue]]属性被设为该布尔值的值</td></tr><tr><td>String</td><td>创建一个新的String对象，其 [[PrimitiveValue]] 属性被设为该布尔值的值</td></tr><tr><td>Object</td><td>结果是输入的参数（不转换）</td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="主值表达式"><a href="#主值表达式" class="headerlink" title="主值表达式"></a>主值表达式</h4><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><blockquote><p>this 关键字执行为当前执行环境的 ThisBinding</p></blockquote><h5 id="标识符引用"><a href="#标识符引用" class="headerlink" title="标识符引用"></a>标识符引用</h5><h5 id="字面量引用"><a href="#字面量引用" class="headerlink" title="字面量引用"></a>字面量引用</h5><h5 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h5><h5 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h5><h5 id="分组表达式"><a href="#分组表达式" class="headerlink" title="分组表达式"></a>分组表达式</h5><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><h5 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h5><h5 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h5><table><thead><tr><th>val 类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>“Undefined”</td></tr><tr><td>Null</td><td>“null”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Number</td><td>“number”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Object（原生，且没有实现call）</td><td>“object”</td></tr><tr><td>Object（原生或者宿主实现call）</td><td>“function”</td></tr></tbody></table><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ( Expression ) Statement else Statement</span><br></pre></td></tr></table></figure><h4 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h4><h5 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h5><blockquote><p>循环至少执行一次，即便条件为 false，因为代码块是在条件语句判断前执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">do Statement while ( Expression )</span><br><span class="line">var text = &quot;&quot;</span><br><span class="line">var i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">    text += &quot;&lt;br&gt;数字为 &quot; + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt; 5) &#123; </span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h5><blockquote><p>while 循环会在指定条件为真时循环执行代码块。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while ( Expression ) Statement</span><br></pre></td></tr></table></figure><h5 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for ( ExpressionNoInopt ; Expressionopt ; Expressionopt) Statement</span><br></pre></td></tr></table></figure><h5 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for ( LeftHandSideExpression in Expression ) Statement</span><br><span class="line">var person = &#123;fname:&quot;John&quot;, lname:&quot;Doe&quot;, age:25&#125;; </span><br><span class="line">var text = &quot;&quot;;</span><br><span class="line">var x;</span><br><span class="line">for (x in person) &#123;</span><br><span class="line">text += person[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：John Doe 25</span><br></pre></td></tr></table></figure><blockquote><p>总结：for/in 语句用于循环对象属性。循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</p><ul><li><strong>for</strong> - 循环代码块一定的次数</li><li><strong>for/in</strong> - 循环遍历对象的属性</li><li><strong>while</strong> - 当指定的条件为 true 时循环指定的代码块</li><li><strong>do/while</strong> - 同样当指定的条件为 true 时循环指定的代码块</li></ul><p>注意：不要使用 for/in 语句来循环数组的索引，你可以使用 <a href="http://www.runoob.com/jsref/jsref-for.html" target="_blank" rel="noopener">for</a> 语句替代。</p></blockquote><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h4><blockquote><p><strong>continue 语句</strong>中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 该例子跳过了值 3</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">continue;</span><br><span class="line">for (i=0;i&lt;=10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) continue;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h4><blockquote><p>break 语句可用于跳出循环</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (i=0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) break;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：break 语句可用于跳出循环。</p><p>continue 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）</p></blockquote><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><blockquote><p>return 语句会终止函数的执行并返回函数的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return ;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    return Math.PI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with ( Expression ) Statement</span><br></pre></td></tr></table></figure><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><blockquote><p>switch 语句用于基于不同的条件来执行不同的动作。</p><p>switch 语句是 JavaScript 条件语句的一部分，用于根据不同的条件执行不同的动作。 使用 switch 从多个语句块中选择一个执行。</p><p>switch 语句计算每个表达式。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。</p><p>switch 语句通常与 break 或 default 关键字一起使用。两者都是可选的</p><p><strong>break</strong> 关键字用于跳出switch代码块。会终止switch代码块的执行。 如果忽略该关键字，swith 语句的下一个代码块会被执行。</p><p><strong>default</strong> 关键字 来规定匹配不存在时做的事情。 default 关键字在 switch 语句中只能出现一次。虽然是可选参数，但是建议都使用该参数，在不是我们期望的情况下，可以使用它输出信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(expression) &#123;</span><br><span class="line">    case n:</span><br><span class="line">        代码块</span><br><span class="line">        break;</span><br><span class="line">    case n:</span><br><span class="line">        代码块</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        默认代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h4><blockquote><p> throw [no LineTerminator here] Expression ;</p><p>检测输入变量的值。如果值是错误的，会抛出一个异常（err）</p><p>异常 (err) 通过 catch 语句捕获并自定义输出错误信息</p><ul><li>throw 语句抛出一个错误</li><li>当错误发生时， JavaScript 会停止执行并抛出错误信息</li><li>异常可以是 JavaScript 字符串、数字、逻辑值或对象</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123; </span><br><span class="line">       if(x == &quot;&quot;) throw &quot;is Empty&quot;;</span><br><span class="line">       if(isNaN(x)) throw &quot;not a number&quot;;</span><br><span class="line">       if(x &gt; 10) throw &quot;too high&quot;;</span><br><span class="line">       if(x &lt; 5) throw &quot;too low&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   catch(err) &#123;</span><br><span class="line">       message.innerHTML = &quot;Input &quot; + err;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><blockquote><p>debugger 语句用于停止执行 JavaScript，并调用 (如果可用) 调试函数</p><p>使用 debugger 语句类似于在代码中设置断点</p><p>通常，你可以通过按下 F12 开启调试工具， 并在调试菜单中选择 “Console”</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h4><blockquote><p>唯一的全局对象建立在控制进入任何执行环境之前</p></blockquote><h5 id="全局对象值属性"><a href="#全局对象值属性" class="headerlink" title="全局对象值属性"></a>全局对象值属性</h5><h6 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h6><blockquote><p>NaN 的值是 NaN</p></blockquote><h6 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h6><blockquote><p>Infinity 的值是 +∞</p></blockquote><h6 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h6><blockquote><p>undefined 的值是 undefined</p></blockquote><h5 id="全局对象的函数属性"><a href="#全局对象的函数属性" class="headerlink" title="全局对象的函数属性"></a>全局对象的函数属性</h5><h6 id="eval-x"><a href="#eval-x" class="headerlink" title="eval (x)"></a>eval (x)</h6><blockquote><p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行</p><p>如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。</p></blockquote><h6 id="parseInt-string-radix"><a href="#parseInt-string-radix" class="headerlink" title="parseInt (string , radix)"></a>parseInt (string , radix)</h6><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要被解析的字符串。</td></tr><tr><td>radix</td><td>可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</td></tr></tbody></table><ul><li>如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。</li><li>如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。</li><li>如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</li></ul><h6 id="parseFloat-string"><a href="#parseFloat-string" class="headerlink" title="parseFloat (string)"></a>parseFloat (string)</h6><blockquote><p>parseFloat() 函数可解析一个字符串，并返回一个浮点数。</p><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p></blockquote><h6 id="isNaN-value"><a href="#isNaN-value" class="headerlink" title="isNaN(value)"></a>isNaN(value)</h6><blockquote><p>isNaN() 函数用于检查其参数是否是非数字值。</p><p>如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。</p></blockquote><h6 id="isFinite-value"><a href="#isFinite-value" class="headerlink" title="isFinite(value)"></a>isFinite(value)</h6><blockquote><p>isFinite() 函数用于检查其参数是否是无穷大。</p><p>如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</p></blockquote><h6 id="Number-object"><a href="#Number-object" class="headerlink" title="Number(object)"></a>Number(object)</h6><blockquote><p>Number() 函数把对象的值转换为数字。</p><p>如果对象的值无法转换为数字，那么 Number() 函数返回 NaN。</p><p>object 可选。一个 JavaScript 对象。如果没有提供参数，则返回0。</p></blockquote><h6 id="String-object"><a href="#String-object" class="headerlink" title="String(object)"></a>String(object)</h6><blockquote><p>String() 函数把对象的值转换为字符串。</p></blockquote><h4 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h4><h4 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h4><h5 id="Math-对象属性"><a href="#Math-对象属性" class="headerlink" title="Math 对象属性"></a>Math 对象属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td>返回算术常量 e，即自然对数的底数（约等于2.718）</td></tr><tr><td>LN2</td><td>返回 2 的自然对数（约等于0.693）</td></tr><tr><td>LN10</td><td>返回 10 的自然对数（约等于2.302）</td></tr><tr><td>LOG2E</td><td>返回以 2 为底的 e 的对数（约等于 1.4426950408889634）</td></tr><tr><td>LOG10E</td><td>返回以 10 为底的 e 的对数（约等于0.434）</td></tr><tr><td>PI</td><td>返回圆周率（约等于3.14159）</td></tr><tr><td>SORT1 2</td><td>返回 2 的平方根的倒数（约等于 0.707）</td></tr><tr><td>SORT2</td><td>返回 2 的平方根（约等于 1.414）</td></tr></tbody></table><h5 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回</td></tr><tr><td>ceil(x)</td><td>对数进行上舍入</td></tr><tr><td>exp(x)</td><td>返回 E^x 的指数</td></tr><tr><td>floor(x)</td><td>对x进行下舍入</td></tr><tr><td>max(x,y,z,…n)</td><td>返回 x,y,z,…,n 中的最高值</td></tr><tr><td>min(x,y,z,…n)</td><td>返回 x,y,z,…,n中的最低值</td></tr><tr><td>pow(x,y)</td><td>返回 x 的 y 次幂</td></tr><tr><td>random()</td><td>返回0-1之间的随机数</td></tr><tr><td>round(x)</td><td>四舍五入</td></tr></tbody></table><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回创建数组对象的原型函数</td></tr><tr><td>length</td><td>设置或返回数组元素的个数</td></tr><tr><td>prototype</td><td>允许向数组对象添加属性或方法</td></tr></tbody></table><h4 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或更多的数组，并返回结果。</td></tr><tr><td>every()</td><td>用于检测数组所有元素是否都符合指定条件（通过函数提供）如果有一个元素不满足，返回false，所有元素都满足，则返回true。</td></tr><tr><td>fill()</td><td>将一个固定值替换数组中所有的元素。</td></tr><tr><td>filter()</td><td>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的元素。</td></tr><tr><td>find()</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES5&quot;&gt;&lt;a href=&quot;#ES5&quot; class=&quot;headerlink&quot; title=&quot;ES5&quot;&gt;&lt;/a&gt;ES5&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 搭建博客</title>
    <link href="http://yoursite.com/2018/09/28/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/09/28/hexo搭建博客/</id>
    <published>2018-09-28T06:06:46.511Z</published>
    <updated>2018-09-28T10:00:49.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.js</span><br><span class="line">Git</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo into blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g || hexo generate</span><br><span class="line">$ hexo s || hexo server</span><br></pre></td></tr></table></figure><p>Hexo 常用命令<br>  hexo g 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>  hexo s 启动本地web服务，用于博客的预览<br>  hexo deploy (hexo d) 部署播客到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">'postName'</span> --- 新建文章</span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> --- 新建页面</span><br></pre></td></tr></table></figure><p>常用简写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure></p><p>目前安装所用的本地环境如下：(可以通过hexo -v查看)</p><h3 id="Hexo-主题设置"><a href="#Hexo-主题设置" class="headerlink" title="Hexo 主题设置"></a>Hexo 主题设置</h3><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next</p><h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动本地web服务器</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h2><h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改Hexo目录下的_config.yml配置文件</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>需要提前安装一个扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在命令行中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="使用git命令行部署"><a href="#使用git命令行部署" class="headerlink" title="使用git命令行部署"></a>使用git命令行部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo/blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/username.github.io.git .deploy/username.github.io</span><br></pre></td></tr></table></figure><p>将github上创建的博客克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码</p><h3 id="创建一个deploy脚本文件"><a href="#创建一个deploy脚本文件" class="headerlink" title="创建一个deploy脚本文件"></a>创建一个deploy脚本文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ cp -R public/ .deploy/username.github.io</span><br><span class="line">$ <span class="built_in">cd</span> .deploy/username.github.io</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m “update”</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h2 id="Hexo-配置主题"><a href="#Hexo-配置主题" class="headerlink" title="Hexo 配置主题"></a>Hexo 配置主题</h2><p>主题配置在themes文件下_config.yml</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">我是如何利用Github Pages搭建起我的博客，细数一路的坑</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统环境配置&quot;&gt;&lt;a href=&quot;#系统环境配置&quot; class=&quot;headerlink&quot; title=&quot;系统环境配置&quot;&gt;&lt;/a&gt;系统环境配置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
  </entry>
  
</feed>
